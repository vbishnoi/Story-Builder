/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import com.uoy.sb.Global;
import com.uoy.sb.ImageFilter;
import com.uoy.sb.SoundFilter;
import controller.StoryController;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.BorderFactory;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import model.Page;
import model.Story;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

/**
 *
 * @author Y0239881
 */
public class CreatePage extends javax.swing.JPanel {

    private int _storyID = -1;
    private StoryController sc = null;
    private int _pageIndex = 0;
    private LinkedList<Page> storyPages = null;
    private boolean isChanged = false;
    private Page currentPage;
    private JPanel _parentPanel;

    /**
     * @return the _storyID
     */
    public int getStoryID() {
        return _storyID;
    }

    /**
     * @param storyID the _storyID to set
     */
    public void setStoryID(int storyID) {
        this._storyID = storyID;
    }

    /**
     * Creates new form PageEditing
     */
    public CreatePage() {
        initComponents();
        
    }

    public CreatePage(int StoryID) {
        initComponents();

//        pnlStory.setBorder(BorderFactory.createTitledBorder("Story"));

        txtContent.getDocument().addDocumentListener(new PageDocumentListener());
        txtBackgroundImage.getDocument().addDocumentListener(new PageDocumentListener());
        txtSound.getDocument().addDocumentListener(new PageDocumentListener());

        this.setStoryID(StoryID);
        sc = new StoryController();

        storyPages = sc.getStory(StoryID).getPages();

        if (storyPages != null && storyPages.size() > 0) {
            pageIndexChanged();

            isChanged = false;
        }
    }

    private void pageIndexChanged() {
        if (storyPages != null) {
            Page p = storyPages.get(_pageIndex);
            txtContent.setText(p.getText());

            lblPageCount.setText("Page " + (_pageIndex + 1) + "/" + storyPages.size());
        }
    }

    /*
     * Store changed values
     */
    private void savePage() {
        System.out.println(isChanged);
        if (isChanged) {
            Page modifiedPage = new Page();
            modifiedPage.setBackgroundImage(txtBackgroundImage.getText());
            modifiedPage.setSound(txtSound.getText());
            modifiedPage.setText(txtContent.getText());

            storyPages.set(_pageIndex, modifiedPage);
        }

        isChanged = false;
    }

    /*
     * Create a new page
     */
    private boolean createNewPage() {
        if (txtContent.getText().equals("")) {
            JOptionPane.showMessageDialog(SwingUtilities.getWindowAncestor(this), "Please enter the page content");
            return false;
        }

        Page page = new Page();

        page.setBackgroundImage(txtBackgroundImage.getText());
        page.setSound(txtSound.getText());
        page.setText(txtContent.getText());

        CreateStory parent = (CreateStory) this.getParentPanel();
        parent.addPage(page);

        return true;
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        btnSelectImage = new javax.swing.JButton();
        txtBackgroundImage = new javax.swing.JTextField();
        txtSound = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnSelectSound = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtContent = new javax.swing.JTextArea();
        btnNewPage = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        lblPageCount = new javax.swing.JLabel();
        btnPlay = new javax.swing.JButton();
        btnSaveNCreate = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();

        jLabel3.setText("Sound:");

        btnSelectImage.setText("Select Image");
        btnSelectImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectImageActionPerformed(evt);
            }
        });

        jLabel1.setText("Page Content:");

        btnSelectSound.setText("Select sound");
        btnSelectSound.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectSoundActionPerformed(evt);
            }
        });

        jLabel2.setText("Background Image:");

        txtContent.setColumns(20);
        txtContent.setRows(5);
        jScrollPane1.setViewportView(txtContent);

        btnNewPage.setText("Create new Page");
        btnNewPage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewPageActionPerformed(evt);
            }
        });

        btnPrevious.setText("Previous Page");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnNext.setText("Next Page");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblPageCount.setText("{pageCount}");

        btnPlay.setText("Play");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnSaveNCreate.setText("Save & Create new");
        btnSaveNCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveNCreateActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(16, 16, 16)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(jLabel2)
                    .add(jLabel3)
                    .add(lblPageCount))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(36, 36, 36)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                .add(layout.createSequentialGroup()
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(layout.createSequentialGroup()
                                            .add(txtSound)
                                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                            .add(btnPlay)
                                            .add(6, 6, 6))
                                        .add(txtBackgroundImage))
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                        .add(btnSelectImage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 106, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(btnSelectSound, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                    .add(1, 1, 1))
                                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 494, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(btnBack)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnNewPage)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnPrevious)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(btnNext)))
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(btnSaveNCreate)
                        .add(18, 18, 18)
                        .add(btnClose)
                        .add(39, 39, 39))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jLabel1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(lblPageCount))
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 110, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel2)
                        .add(txtBackgroundImage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(btnSelectImage))
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(jLabel3)
                    .add(txtSound, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnPlay)
                    .add(btnSelectSound))
                .add(14, 14, 14)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnSaveNCreate)
                    .add(btnClose))
                .add(23, 23, 23)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnNewPage)
                    .add(btnPrevious)
                    .add(btnNext)
                    .add(btnBack))
                .addContainerGap(28, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        savePage();

        _pageIndex = (_pageIndex == 0) ? 0 : _pageIndex - 1;
        pageIndexChanged();
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        savePage();

        _pageIndex = (_pageIndex < storyPages.size() - 1) ? _pageIndex + 1 : storyPages.size() - 1;
        pageIndexChanged();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        savePage();

        if (getStoryID() != -1) {
            Story s = sc.getStory(getStoryID());
            s.setPages(storyPages);
            sc.updateStory(s);
        }

        Global.container.setDisplay(new AdultHome());
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSelectImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectImageActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.addChoosableFileFilter(new ImageFilter());
        fc.setAcceptAllFileFilterUsed(false);

        //In response to a button click:
        int returnVal = fc.showOpenDialog(CreatePage.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            txtBackgroundImage.setText(file.getAbsolutePath());
        } else {
//            log.append("Open command cancelled by user." + newline);
        }
    }//GEN-LAST:event_btnSelectImageActionPerformed

    private void btnSelectSoundActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectSoundActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        fc.addChoosableFileFilter(new SoundFilter());
        fc.setAcceptAllFileFilterUsed(false);

        //In response to a button click:
        int returnVal = fc.showOpenDialog(CreatePage.this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();

            txtSound.setText(file.getAbsolutePath());
        } else {
//            log.append("Open command cancelled by user." + newline);
        }
    }//GEN-LAST:event_btnSelectSoundActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        if (!txtSound.getText().equals("")) {
            AudioInputStream audio;
            try {
                audio = AudioSystem.getAudioInputStream(new File(txtSound.getText()));

                Clip clip = AudioSystem.getClip();
                clip.open(audio);
                clip.start();
            } catch (IOException ex) {
                Logger.getLogger(CreatePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (LineUnavailableException ex) {
                Logger.getLogger(CreatePage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedAudioFileException ex) {
                Logger.getLogger(CreatePage.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnNewPageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewPageActionPerformed


        savePage();
    }//GEN-LAST:event_btnNewPageActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed

        if (createNewPage()) {
            JDialog dialog = (JDialog) SwingUtilities.getWindowAncestor(this);
            dialog.dispose();
            dialog.setVisible(false);
        }
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnSaveNCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveNCreateActionPerformed
        if (createNewPage()) {
            txtBackgroundImage.setText("");
            txtContent.setText("");
            txtSound.setText("");
        }
    }//GEN-LAST:event_btnSaveNCreateActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnNewPage;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnSaveNCreate;
    private javax.swing.JButton btnSelectImage;
    private javax.swing.JButton btnSelectSound;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPageCount;
    private javax.swing.JTextField txtBackgroundImage;
    private javax.swing.JTextArea txtContent;
    private javax.swing.JTextField txtSound;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the _parentPanel
     */
    public JPanel getParentPanel() {
        return _parentPanel;
    }

    /**
     * @param parentPanel the _parentPanel to set
     */
    public void setParentPanel(JPanel parentPanel) {
        this._parentPanel = parentPanel;
    }

    /**
     * @return the currentPage
     */
    public Page getCurrentPage() {
        return currentPage;
    }

    /**
     * @param currentPage the currentPage to set
     */
    public void setCurrentPage(Page currentPage) {
        this.currentPage = currentPage;
        
        if(currentPage != null) {
            txtBackgroundImage.setText(currentPage.getBackgroundImage());
            txtContent.setText(currentPage.getText());
            txtSound.setText(currentPage.getSound());
        }
    }

    class PageDocumentListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            isChanged = true;
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            isChanged = true;
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            isChanged = true;
        }
    }
}
